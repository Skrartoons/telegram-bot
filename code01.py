import asyncio
import random
import re
from telethon import TelegramClient, events
from telethon.tl.functions.messages import SendMessageRequest

accounts = [
    {"name": "wirab", "phone": "+491702814038", "api_id": "21442333", "api_hash": "855169c5ce62c8b50cd58af0d66ff607", "button_text": "üå≤ Forest"},
    {"name": "qmoru", "phone": "+4915236802221", "api_id": "23376010", "api_hash": "06d24bfa47dca003224249a7c86cd5c3", "button_text": random.choice(['üîº Go North', '‚óÄÔ∏è Go West'])},
    {"name": "qtude", "phone": "+380955548460", "api_id": "24709319", "api_hash": "3c1e3f0c2d1ff3e28b41c6e9ff3246ae", "button_text": random.choice(['üîº Go North', '‚ñ∂Ô∏èÔ∏è Go East'])}
]

async def handle_message(client, message, account):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —á–∏—Å–ª–∞ –∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏"""
    if message.text:
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ BUTTON_TEXT –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–∫–æ–Ω–æ–∫
        if 'üå≤' in message.text:
            account['button_text'] = 'üå≤ Forest'
        elif 'üèî' in message.text:
            account['button_text'] = 'üèî Valley'
        elif 'üåª' in message.text:
            account['button_text'] = 'üåª Field'
        elif 'üî•' in message.text:
            if account["name"] == "qmoru":
                account['button_text'] = random.choice(['üîº Go North', '‚óÄÔ∏è Go West'])
            else:  # –¥–ª—è qtude –∏ wirab
                account['button_text'] = random.choice(['üîº Go North', '‚ñ∂Ô∏èÔ∏è Go East'])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏
        match = re.search(r'üîã(\d+)/', message.text)
        if match:
            number = int(match.group(1))
            if number > 0:
                # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
                await asyncio.sleep(random.uniform(1, 3))
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
                await client(SendMessageRequest(
                    peer='@ChatWarsBot',
                    message=account['button_text']
                ))
                return True
    return False

async def send_command(client, account):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /me –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤"""
    chat = await client.get_entity('@ChatWarsBot')
    is_active = True

    while True:
        try:
            if is_active:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã /me
                await client.send_message(chat, '/me')

                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                messages = await client.get_messages(chat, limit=5)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                short_wait = False  # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
                for message in messages:
                    if await handle_message(client, message, account):
                        if 'üî•' in message.text:
                            short_wait = True
                        break

                # –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                if short_wait:
                    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 3.5 –¥–æ 5 –º–∏–Ω—É—Ç
                    await asyncio.sleep(random.uniform(3.5 * 60, 5 * 60))
                else:
                    # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç 180 –¥–æ 420 –º–∏–Ω—É—Ç
                    await asyncio.sleep(random.uniform(1 * 60, 3 * 60))

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–Ω–∞–∫–æ–≤ - –∏ +
            messages = await client.get_messages(chat, limit=5)
            for message in messages:
                if '-' in (message.text or ''):
                    is_active = False
                    print(f"{account['name']}: –ù–∞–π–¥–µ–Ω –∑–Ω–∞–∫ '-', –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
                    break
                elif '+' in (message.text or ''):
                    is_active = True
                    print(f"{account['name']}: –ù–∞–π–¥–µ–Ω –∑–Ω–∞–∫ '+', –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞")
                    break

            if not is_active:
                # –ü–∞—É–∑–∞ –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(random.uniform(1, 3))  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

        except Exception as e:
            print(f"{account['name']}: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def main():
    """–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥"""
    clients = []
    try:
        for account in accounts:
            client = TelegramClient(account["name"], account["api_id"], account["api_hash"])
            await client.start(account["phone"])
            clients.append(client)
        tasks = [send_command(client, account) for client, account in zip(clients, accounts)]
        await asyncio.gather(*tasks)
    finally:
        for client in clients:
            await client.disconnect()

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
asyncio.run(main())
